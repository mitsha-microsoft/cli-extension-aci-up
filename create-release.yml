pr: none

trigger: none

jobs:

  - job: 'Build_Publish_ACI_UP_CLI_Extension'
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          architecture: 'x64'

      - script: python -m pip install --upgrade pip
        displayName: 'Upgrade Pip'

      - script: python -m pip install --user wheel==0.30.0
        displayName: 'Install Wheel'
      
      - script: 'python -m pip install --user --upgrade .'
        displayName: 'Pip Upgrade'
        workingDirectory: 'src/aci/'
      
      - script: 'python ./setup.py bdist_wheel'
        displayName: 'Build wheel for CLI Extension'
        workingDirectory: 'src/aci/'
      
      - task: PublishBuildArtifacts@1
        displayName: 'Publish ACI Up CLI Extension as an Artifact'
        inputs:
          PathtoPublish: 'src/aci/dist'
          artifactName: 'aci-up-cli-extension'
          publishLocation: 'Container'
  
  - job: 'Run_Test'
    dependsOn: 'Build_Publish_ACI_UP_CLI_Extension'

    steps:
      - task: PythonScript@0
        displayName: 'setupVersion'
        name: 'setupVersion'
        inputs:
          scriptSource: 'inline'
          script: |
            from azext_aci.version import VERSION
            print("##vso[task.setvariable variable=CLIVersion;isOutput=true"+VERSION)
            print("##vso[task.setvariable variable=RTitle;isOutput=true"+'Azure CLI Extension to Deploy to ACI ' + VERSION)

  - job: 'Calculate_Sha_And_Create_Release'
    dependsOn: 'Run_Test'
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      CLIVersion: $[dependencies.Run_Test.outputs['setupVersion.CLIVersion']]
      RTitle: $[dependencies.Run_Test.outputs['setupVersion.RTitle']]

    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Extension Wheel from Build Artifacts'
        inputs:
          buildType: current
          downloadType: single
          artifactName: aci-up-cli-extension
          downloadPath: '$(System.ArtifactsDirectory)/extension'

      - task: PowerShell@2
        displayName: 'Calculate Sha for downloaded extension'
        inputs:
          targetType: 'inline'
          script: |
            $extensions = Get-ChildItem -Filter "*.whl" -Recurse | Select-Object FullName
            Foreach ($extension in $extensions)
            {
              Write-Host "calculating sha for " $extension.FullName
              certutil -hasfile $extension.FullName sha256
            }
            Write-Host "done"
          workingDirectory: '$(System.ArtifactsDirectory)/extension'

      - task: GitHubRelease@0
        inputs:
          gitHubConnection: mitsha-microsoft-2
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: manual
          tag: $(Build.BuildNumber)
          title: $(RTitle)
          assets: '$(System.ArtifactsDirectory)/extension/**/*.whl'
          assetUploadMode: 'delete'
          isDraft: true
          isPreRelease: true
          addChangeLog: true

      
  



